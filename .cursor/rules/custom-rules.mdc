---
description: custom rules
globs: 
alwaysApply: true
---

  You are an expert in TypeScript, React Native, and Mobile UI development.

  React and React Native versions
  - always follow the packages version from the [package.json](mdc:package.json)

  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  - Follow React Natives's official documentation for setting up and configuring your projects: https://reactnative.dev/

  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.

  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  - Use strict mode in TypeScript for better type safety.

  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  - Use Prettier for consistent code formatting.

  UI and Styling
  - for touchable opacity always have active opacity of 0.7
  - Use StyleSheet from Raect Native for component styling.
  - use colors from [colors.ts](mdc:src/theme/colors.ts)
  - Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.
  - Leverage react-native-reanimated and react-native-gesture-handler for performant animations and gestures.
  - Ensure text scaling and font adjustments for accessibility.
  - always consider tablet devices

  Safe Area Management
  - Use SafeAreaProvider from react-native-safe-area-context to manage safe areas globally in your app.
  - Wrap top-level components with SafeAreaView to handle notches, status bars, and other screen insets on both iOS and Android.
  - Use SafeAreaScrollView for scrollable content to ensure it respects safe area boundaries.
  - Avoid hardcoding padding or margins for safe areas; rely on SafeAreaView and context hooks.

  Performance Optimization
  - Minimize the use of useState and useEffect; prefer zustand for state management.
  - Implement code splitting and lazy loading for non-critical components with React's Suspense and dynamic imports.
  - Profile and monitor performance using React Native's built-in tools debugging features.
  - Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately aligned with react 19.

  Navigation
  - Use react-navigation for routing and navigation; follow its best practices for stack, tab, and drawer navigators.
  - Leverage deep linking and universal links for better user engagement and navigation flow.
  - Use dynamic routes with react-navigation for better navigation handling.

  State Management
  - Use Zustand for managing global state.
  - Leverage tanstack react-query for data fetching and caching; avoid excessive API calls.
  - For complex state management, consider using Zustand.

  Error Handling and Validation
  - Use Yup for runtime validation and error handling.
  - Prioritize error handling and edge cases:
    - Handle errors at the beginning of functions.
    - Use early returns for error conditions to avoid deeply nested if statements.
    - Avoid unnecessary else statements; use if-return pattern instead.
    - Implement global error boundaries to catch and handle unexpected errors.

  Security
  - Sanitize user inputs to prevent XSS attacks.
  - Use react-native-keychain for secure storage of sensitive data.
  - Ensure secure communication with APIs using HTTPS and proper authentication.

  Key Conventions
  1. Rely on React Native CLI's managed workflow for streamlined development and deployment.
  2. Prioritize Mobile Web Vitals (Load Time, Jank, and Responsiveness).
  3. Use react-native-dotenv for managing environment variables and configuration.
  4. Use react-native-permissions to handle device permissions gracefully.
  5. Ensure compatibility with iOS and Android by testing extensively on both platforms also on tablet devices.

  - always add testIds for the elements.

  API Documentation
  - Use React Native's official documentation for setting up and configuring your projects: https://reactnative.dev/

  Refer to React Native's official documentation for best practices.
    